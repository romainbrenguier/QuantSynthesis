--- cudd/cudd.h	2015-07-29 15:32:02.472668568 +0200
***************
*** 612,617 ****
--- 612,621 ----
  
  /**AutomaticStart*************************************************************/
  
+ 
+   typedef enum { OP_PLUS , OP_MINIMUM , OP_TIMES , OP_THRESHOLD , OP_DIVIDE , OP_MINUS , OP_MAXIMUM , OP_ONEZEROMAXIMUM, OP_DIFF , OP_AGREEMENT , OP_OR , OP_NAND , OP_NOR , OP_XOR , OP_XNOR } operation;
+ extern void setRing(operation sum, operation product, double zero);
+   
  /*---------------------------------------------------------------------------*/
  /* Function prototypes                                                       */
  /*---------------------------------------------------------------------------*/
--- cudd/cuddMatMult.c	2015-07-30 16:43:20.096591471 +0200
***************
*** 87,92 ****
--- 87,118 ----
  /* Macro declarations                                                        */
  /*---------------------------------------------------------------------------*/
  
+ int ring_sum = OP_PLUS; 
+ int ring_product = OP_TIMES;
+ double ring_zero = 0.0;
+ 
+ #define OP_OF_INT(x) ((x == OP_PLUS)?Cudd_addPlus:((x == OP_MINIMUM)?Cudd_addMinimum:((x == OP_TIMES)?Cudd_addTimes:((x == OP_THRESHOLD)?Cudd_addThreshold:((x == OP_DIVIDE)?Cudd_addDivide:((x == OP_MINUS)?Cudd_addMinus:((x == OP_MAXIMUM)?Cudd_addMaximum:((x == OP_ONEZEROMAXIMUM)?Cudd_addOneZeroMaximum:((x == OP_DIFF)?Cudd_addDiff:((x == OP_AGREEMENT)?Cudd_addAgreement:((x == OP_OR)?Cudd_addOr:((x == OP_NAND)?Cudd_addNand:((x == OP_NOR)?Cudd_addNor:((x == OP_XOR)?Cudd_addXor:Cudd_addXnor))))))))))))))
+ #define ADD_OF_RING (Cudd_addConst(dd,ring_sum * 100 + ring_product))
+ 
+ #define RING_SUM (OP_OF_INT(ring_sum)) 
+ #define RING_PRODUCT (OP_OF_INT(ring_product))
+ #define RING_ZERO (Cudd_addConst(dd,ring_zero))
+ 
+ void setRing(operation sum, operation product, double zero)
+ {
+   ring_sum = sum; 
+   ring_product = product;
+   ring_zero = zero;
+ }
+ 
+ double perform_op(operation op,double a, double b){
+   switch(op){
+   case OP_PLUS: return (a+b);
+   case OP_TIMES: return (a*b);
+   case OP_MINIMUM: return (a<b?a:b);
+   case OP_MAXIMUM: return (a<b?b:a);
+   }
+ }
  
  /**AutomaticStart*************************************************************/
  
***************
*** 187,198 ****
  {
      DdNode *w, *cube, *tmp, *res; 
      int i;
!     tmp = Cudd_addApply(dd,Cudd_addTimes,A,B);
      if (tmp == NULL) return(NULL);
      Cudd_Ref(tmp);
      Cudd_Ref(cube = DD_ONE(dd));
      for (i = nz-1; i >= 0; i--) {
! 	 w = Cudd_addIte(dd,z[i],cube,DD_ZERO(dd));
  	 if (w == NULL) {
  	    Cudd_RecursiveDeref(dd,tmp);
  	    return(NULL);
--- 213,224 ----
  {
      DdNode *w, *cube, *tmp, *res; 
      int i;
!     tmp = Cudd_addApply(dd,RING_PRODUCT,A,B);
      if (tmp == NULL) return(NULL);
      Cudd_Ref(tmp);
      Cudd_Ref(cube = DD_ONE(dd));
      for (i = nz-1; i >= 0; i--) {
! 	 w = Cudd_addIte(dd,z[i],cube,RING_ZERO);
  	 if (w == NULL) {
  	    Cudd_RecursiveDeref(dd,tmp);
  	    return(NULL);
***************
*** 350,380 ****
      unsigned int topA, topB, topV;
      DD_CTFP cacheOp;
  
      statLine(dd);
!     zero = DD_ZERO(dd);
  
      if (A == zero || B == zero) {
          return(zero);
      }
  
      if (cuddIsConstant(A) && cuddIsConstant(B)) {
! 	/* Compute the scaling factor. It is 2^k, where k is the
! 	** number of summation variables below the current variable.
! 	** Indeed, these constants represent blocks of 2^k identical
! 	** constant values in both A and B.
! 	*/
! 	value = cuddV(A) * cuddV(B);
! 	for (i = 0; i < dd->size; i++) {
! 	    if (vars[i]) {
! 		if (dd->perm[i] > topP) {
! 		    value *= (CUDD_VALUE_TYPE) 2;
! 		}
! 	    }
  	}
! 	res = cuddUniqueConst(dd, value);
! 	return(res);
      }
  
      /* Standardize to increase cache efficiency. Clearly, A*B != B*A
      ** in matrix multiplication. However, which matrix is which is
      ** determined by the variables appearing in the ADDs and not by
--- 376,406 ----
      unsigned int topA, topB, topV;
      DD_CTFP cacheOp;
  
+     DdNode * add_of_ring = ADD_OF_RING;
+     cuddRef(add_of_ring);
+ 
      statLine(dd);
!     zero = RING_ZERO; 
!     cuddRef(zero);
  
      if (A == zero || B == zero) {
          return(zero);
      }
  
      if (cuddIsConstant(A) && cuddIsConstant(B)) {
!       value = perform_op(ring_product,cuddV(A),cuddV(B));
!       for (i = 0; i < dd->size; i++) {
! 	if (vars[i]) {
! 	  if (dd->perm[i] > topP) {
! 	    value = perform_op(ring_sum, value,value);
! 	  }
  	}
!       }
!       res = cuddUniqueConst(dd, value);
!       return(res);
      }
  
+ 
      /* Standardize to increase cache efficiency. Clearly, A*B != B*A
      ** in matrix multiplication. However, which matrix is which is
      ** determined by the variables appearing in the ADDs and not by
***************
*** 390,447 ****
      topV = ddMin(topA,topB);
  
      cacheOp = (DD_CTFP) addMMRecur;
!     res = cuddCacheLookup2(dd,cacheOp,A,B);
      if (res != NULL) {
! 	/* If the result is 0, there is no need to normalize.
! 	** Otherwise we count the number of z variables between
! 	** the current depth and the top of the ADDs. These are
! 	** the missing variables that determine the size of the
! 	** constant blocks.
! 	*/
! 	if (res == zero) return(res);
! 	scale = 1.0;
! 	for (i = 0; i < dd->size; i++) {
! 	    if (vars[i]) {
! 		if (dd->perm[i] > topP && (unsigned) dd->perm[i] < topV) {
! 		    scale *= 2;
! 		}
! 	    }
! 	}
! 	if (scale > 1.0) {
! 	    cuddRef(res);
! 	    add_scale = cuddUniqueConst(dd,(CUDD_VALUE_TYPE)scale);
! 	    if (add_scale == NULL) {
! 		Cudd_RecursiveDeref(dd, res);
! 		return(NULL);
! 	    }
! 	    cuddRef(add_scale);
! 	    scaled = cuddAddApplyRecur(dd,Cudd_addTimes,res,add_scale);
! 	    if (scaled == NULL) {
! 		Cudd_RecursiveDeref(dd, add_scale);
! 		Cudd_RecursiveDeref(dd, res);
! 		return(NULL);
! 	    }
! 	    cuddRef(scaled);
! 	    Cudd_RecursiveDeref(dd, add_scale);
! 	    Cudd_RecursiveDeref(dd, res);
! 	    res = scaled;
! 	    cuddDeref(res);
  	}
!         return(res);
      }
  
      /* compute the cofactors */
      if (topV == topA) {
! 	At = cuddT(A);
! 	Ae = cuddE(A);
      } else {
! 	At = Ae = A;
      }
      if (topV == topB) {
! 	Bt = cuddT(B);
! 	Be = cuddE(B);
      } else {
! 	Bt = Be = B;
      }
  
      t = addMMRecur(dd, At, Bt, (int)topV, vars);
--- 416,452 ----
      topV = ddMin(topA,topB);
  
      cacheOp = (DD_CTFP) addMMRecur;
!     res = cuddCacheLookup(dd,cacheOp,A,B,add_of_ring);
! 
      if (res != NULL) {
!       cuddRef(res);
!       for (i = 0; i < dd->size; i++) {
! 	if (vars[i]) {
! 	  if (dd->perm[i] > topP && (unsigned) dd->perm[i] < topV) {
! 	    DdNode *tmp = cuddAddApplyRecur(dd,RING_SUM,res,res);
! 	    cuddRef(tmp);
! 	    Cudd_RecursiveDeref(dd,res);
! 	    res = tmp;
! 	  }
  	}
!       }
!       return(res);
! 
      }
  
+ 
      /* compute the cofactors */
      if (topV == topA) {
!     	At = cuddT(A);
!     	Ae = cuddE(A);
      } else {
!     	At = Ae = A;
      }
      if (topV == topB) {
!     	Bt = cuddT(B);
!     	Be = cuddE(B);
      } else {
!     	Bt = Be = B;
      }
  
      t = addMMRecur(dd, At, Bt, (int)topV, vars);
***************
*** 449,456 ****
      cuddRef(t);
      e = addMMRecur(dd, Ae, Be, (int)topV, vars);
      if (e == NULL) {
! 	Cudd_RecursiveDeref(dd, t);
! 	return(NULL);
      }
      cuddRef(e);
  
--- 454,461 ----
      cuddRef(t);
      e = addMMRecur(dd, Ae, Be, (int)topV, vars);
      if (e == NULL) {
!     	Cudd_RecursiveDeref(dd, t);
!     	return(NULL);
      }
      cuddRef(e);
  
***************
*** 454,490 ****
      }
      cuddRef(e);
  
      index = dd->invperm[topV];
      if (vars[index] == 0) {
! 	/* We have split on either the rows of A or the columns
! 	** of B. We just need to connect the two subresults,
! 	** which correspond to two submatrices of the result.
! 	*/
! 	res = (t == e) ? t : cuddUniqueInter(dd,index,t,e);
! 	if (res == NULL) {
! 	    Cudd_RecursiveDeref(dd, t);
! 	    Cudd_RecursiveDeref(dd, e);
! 	    return(NULL);
! 	}
! 	cuddRef(res);
! 	cuddDeref(t);
! 	cuddDeref(e);
      } else {
! 	/* we have simultaneously split on the columns of A and
! 	** the rows of B. The two subresults must be added.
! 	*/
! 	res = cuddAddApplyRecur(dd,Cudd_addPlus,t,e);
! 	if (res == NULL) {
! 	    Cudd_RecursiveDeref(dd, t);
! 	    Cudd_RecursiveDeref(dd, e);
! 	    return(NULL);
! 	}
! 	cuddRef(res);
! 	Cudd_RecursiveDeref(dd, t);
! 	Cudd_RecursiveDeref(dd, e);
      }
  
!     cuddCacheInsert2(dd,cacheOp,A,B,res);
  
      /* We have computed (and stored in the computed table) a minimal
      ** result; that is, a result that assumes no summation variables
--- 459,497 ----
      }
      cuddRef(e);
  
+ 
      index = dd->invperm[topV];
      if (vars[index] == 0) {
!     	/* We have split on either the rows of A or the columns
!     	** of B. We just need to connect the two subresults,
!     	** which correspond to two submatrices of the result.
!     	*/
!     	res = (t == e) ? t : cuddUniqueInter(dd,index,t,e);
!     	if (res == NULL) {
!     	    Cudd_RecursiveDeref(dd, t);
!     	    Cudd_RecursiveDeref(dd, e);
!     	    return(NULL);
!     	}
!     	cuddRef(res);
!     	cuddDeref(t);
!     	cuddDeref(e);
      } else {
!     	/* we have simultaneously split on the columns of A and
!     	** the rows of B. The two subresults must be added.
!     	*/
!     	res = cuddAddApplyRecur(dd,RING_SUM,t,e);
!     	if (res == NULL) {
!     	    Cudd_RecursiveDeref(dd, t);
!     	    Cudd_RecursiveDeref(dd, e);
!     	    return(NULL);
!     	}
!     	cuddRef(res);
!     	Cudd_RecursiveDeref(dd, t);
!     	Cudd_RecursiveDeref(dd, e);
      }
  
!     //cuddCacheInsert2(dd,cacheOp,A,B,res);
!     cuddCacheInsert(dd,cacheOp,A,B,add_of_ring,res);
  
      /* We have computed (and stored in the computed table) a minimal
      ** result; that is, a result that assumes no summation variables
***************
*** 492,526 ****
      ** variable. We now take into account the z variables by properly
      ** scaling the result.
      */
      if (res != zero) {
! 	scale = 1.0;
! 	for (i = 0; i < dd->size; i++) {
! 	    if (vars[i]) {
! 		if (dd->perm[i] > topP && (unsigned) dd->perm[i] < topV) {
! 		    scale *= 2;
! 		}
! 	    }
! 	}
! 	if (scale > 1.0) {
! 	    add_scale = cuddUniqueConst(dd,(CUDD_VALUE_TYPE)scale);
! 	    if (add_scale == NULL) {
! 		Cudd_RecursiveDeref(dd, res);
! 		return(NULL);
! 	    }
! 	    cuddRef(add_scale);
! 	    scaled = cuddAddApplyRecur(dd,Cudd_addTimes,res,add_scale);
! 	    if (scaled == NULL) {
! 		Cudd_RecursiveDeref(dd, res);
! 		Cudd_RecursiveDeref(dd, add_scale);
! 		return(NULL);
! 	    }
! 	    cuddRef(scaled);
! 	    Cudd_RecursiveDeref(dd, add_scale);
! 	    Cudd_RecursiveDeref(dd, res);
! 	    res = scaled;
! 	}
      }
!     cuddDeref(res);
      return(res);
  
  } /* end of addMMRecur */
--- 499,521 ----
      ** variable. We now take into account the z variables by properly
      ** scaling the result.
      */
+ 
      if (res != zero) {
!       for (i = 0; i < dd->size; i++) {
!     	if (vars[i]) {
!     	  if (dd->perm[i] > topP && (unsigned) dd->perm[i] < topV) {
!     	    DdNode *tmp = cuddAddApplyRecur(dd,RING_SUM,res,res);
!     	    cuddRef(tmp);
!     	    Cudd_RecursiveDeref(dd,res);
!     	    res = tmp;
!     	  }
!     	}
!       }
      }
! 
!     //cuddDeref(res);
!     cuddDeref(zero);
!     cuddDeref(add_of_ring);
      return(res);
  
  } /* end of addMMRecur */
***************
*** 565,571 ****
      }
  
      if (f->ref != 1 || g->ref != 1) {
! 	res = cuddCacheLookup(dd, DD_ADD_TRIANGLE_TAG, f, g, cube);
  	if (res != NULL) {
  	    return(res);
  	}
--- 560,566 ----
      }
  
      if (f->ref != 1 || g->ref != 1) {
!         res = cuddCacheLookup(dd, DD_ADD_TRIANGLE_TAG, f, g, cube);
  	if (res != NULL) {
  	    return(res);
  	}
